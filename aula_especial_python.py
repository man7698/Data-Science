# -*- coding: utf-8 -*-
"""Aula_Especial_Python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/storopoli/ciencia-de-dados/blob/master/notebooks/Aula_Especial_Python.ipynb

[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/storopoli/ciencia-de-dados/master?filepath=notebooks%2FAula_Especial_Python.ipynb)
<br>
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/storopoli/ciencia-de-dados/blob/master/notebooks/Aula_Especial_Python.ipynb)

# Revisão de Python

**Objetivos**: Revisar e apresentar Python para estudantes avançados de computação que já possuem lógica de programação e conhecimentos em outras linguagens de programação

## Variáveis

* Númerica - `int` e `float`
* Texto - `str`
* Booleana - `bool`
"""



"""### `type` e `len`"""



"""## Operadores Aritméticos

* Soma `x + y`
* Subtração `x - y`
* Multiplicação `x * y`
* Divisão `x / y`
* Divisão desconsiderando a parte fracionária `x // y`
* Resto de uma divisão `x % y`
* Absoluto `abs(x)`
* Converter para Inteiro `int(x)`
* Converter para Real `float(x)`
* Potência `x ** y`
"""



"""## Operadores Relacionais

* Igual a: `x == y`
* Maior que: `x > y`
* Menor que: `x < y`
* Maior ou igual a: `x >= y`
* Menor ou igual a: `x <= y`
* Diferente de: `x != y`
"""



"""## Operadores Lógicos (Booleanos)

| Operador Lógico | Função    |
|-----------------|-----------|
| `NOT`           | Negação   |
| `AND`           | Conjunção |
| `OR`            | União     |
"""

a = 10
b = 10
c = -10

"""## Operadores de Conjuntos 

| Operador de Conjunto | Função      |
|----------------------|-------------|
| `&`                  | Intersecção |
| `\|`                 | União       |
| `-`                  | Diferença   |
"""

A = {0, 2, 4, 6, 8}
B = {1, 2, 3, 4, 5}

"""## Lista (`list`)

Lista, também como conhecido como *list*, é uma estrutura de dados que possui nenhum, um ou mais itens, que estão ordenados. Os itens são conhecidos também como elementos. Ela é **flexível**, ou seja, podemos adicionar novos itens na lista, podemos alterar itens existentes, podemos remover itens da lista, tudo isto de forma dinâmica.

Em Python, uma lista é representada por uma sequencia de itens, separados por vírgula e dentro de colchetes `[]`. Uma lista vazia é representada por colchetes sem nenhuma informação presente entre os colchetes.

* Fatiar (`[1:3]`)
* Buscar elementos (`[0]`)
* Comprimento (`len(list)`)
* Adicionar elementos (`list.append()`)
* Compreensão de lista (`[x for elemento in lista]`)
"""

lista_vazia = []
lista_num = [1, 2, 3, 4, 5, 6]
lista_mista = [1, 2, 'UNINOVE', 4, 'com', 6, 'Você', True, None]

"""### Mutação de itens de uma lista"""



"""### `index`

Em Python, os índices começam com zero `[0]`
"""



"""### `append`"""



"""### Compreensão de lista (`list comprehension`)"""

lista_num = [1, 2, 3, 4, 5, 6]

"""## Tuplas(`tuple`)
Uma tupla é uma coleção de objetos Python separados por vírgulas. De alguma maneira, uma tupla é semelhante a uma lista em termos de indexação e repetição, mas uma tupla é **imutável**, diferentemente de listas que são **mutáveis**.

* Fatiar (`[1:3]`)
* Buscar elementos (`[0]`)
* Comprimento (`len(tuple)`)
"""

tupla_vazia = ()
tupla_num = (1, 2, 3, 4, 5, 6)
tupla_mista = (1, 2, 'UNINOVE', 4, 'com', 6, 'Você', True, None)

"""### Mutação de itens de uma tupla"""



"""## Percentimento em lista e tupla"""



"""## Dicionários (`dictionary`)

O dicionário em Python é uma coleção não ordenada de valores de dados, usada para armazenar valores de dados como um mapa, que, diferentemente de outros tipos de dados que mantêm apenas um valor único como elemento, o Dictionary mantém um **par chave: valor**. O valor da chave é fornecido no dicionário para torná-lo mais otimizado.

* Chave(`key`)
* Valor(`value`)
"""

dict_vazio = {}
dicionario = {
    1: 'UNINOVE',
    2: 'com você',
    3: 'é 10',
    4: 'você está',
    5: 'aprendendo Python',
    6: 'bem rápido',
    'nome da chave': 'valor da chave'
}

"""### acessando elementos do dicionário"""



"""### adicionado elementos ao dicionário"""



"""### alterando elementos do dicionário

* Chaves **não podem** ser alteradas
* Valores **podem** ser alterados
"""



"""## Importar bibliotecas (`libraries`)

* `import <library>`
* `import <library> as xx`
* `from <library> import *`
* `from <library> import yy`
"""



"""## Desvios Condicionais

* `if`
* `else`
* `efif`

Uma sequência de testes de seleção, os quais serão executados ou não de acordo com o resultado das condições e de acordo com o encadeamento dos testes.
"""

c = 0
a = ?

"""## Estrutura de Repetição `while`

A estrutura de repetição `while` a condição de repetição é verificada antes de entrar no laço de repetição, isto é, se o resultado for verdadeiro, o bloco de instrução será executado. Enquanto o valor da condição for verdadeiro, as ações dos comandos são executadas. No momento em que a condição se torna falsa, o processamento da rotina é desviado para fora do laço. Se a condição for falsa logo de início, os comandos não são executados nenhuma vez.
"""



"""## Estrutura de Repetição `for`

Com a estrutura de repetição `for` podemos executar um determinado conjunto de instruções certo número de vezes. Além disso, este tipo de estrutura prevê uma condição e limites fixos.

A estrutura for é utilizada quando precisamos repetir um conjunto de comandos um número pré-definido de vezes.
"""



"""### `for` em dicionários

```python
for key,value in dicionario.items():
    print(key, value)
```
"""



"""## Funções em Python (`function`)

Podem ter argumentos ou não.
"""



"""## Métodos em Python (`method`)

Método é uma função de um objeto tipo `class` em Python
"""



"""### métodos em bibliotecas

Muitas coisas que importamos são `class` de bibliotecas.

* Exemplo: `pd.DataFrame` ou `pd.Series`

## `NumPy` - Arrays
"""

import numpy as np

"""### Arrays 1-D (vetores)

### Arrays 2-D (matrizes)

### Arrays N-D (tensores)
"""



"""### multiplicação de matriz (`np.dot`)"""



"""### dimensões de arrays (`array.shape`)

retorna uma tupla
"""



"""### fatiando e indexando arrays 2-D"""



"""### transposição de array"""



"""### criando arrays intervalares

* `np.arange()` - valores espaçados uniformemente dentro de um determinado intervalo.
* `np.linspace()` - números espaçados uniformemente em um intervalo especificado.

Muito usadas em `for` loops
"""

