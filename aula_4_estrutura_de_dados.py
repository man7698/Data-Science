# -*- coding: utf-8 -*-
"""Aula_4_Estrutura_de_Dados.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/storopoli/ciencia-de-dados/blob/master/notebooks/Aula_4_Estrutura_de_Dados.ipynb

[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/storopoli/ciencia-de-dados/master?filepath=notebooks%2FAula_4_Estrutura_de_Dados.ipynb)
<br>
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/storopoli/ciencia-de-dados/blob/master/notebooks/Aula_4_Estrutura_de_Dados.ipynb)

# Estruturas de Dados (`list` e `dict`)

**Objetivos**: Apresentar as estruturas de dados (`list` e `dict`)

Python trabalha com diferentes estrutura de dados. As duas principais estruturas de dados que Python trabalha são:
* lista (`list`)
* dicionário (`dict`)

## Lista (`list`)

Lista, também como conhecido como *list*, é uma estrutura de dados que possui nenhum, um ou mais itens, que estão ordenados. Os itens são conhecidos também como elementos. Ela é flexível, ou seja, podemos adicionar novos itens na lista, podemos alterar itens existentes, podemos remover itens da lista, tudo isto de forma dinâmica.

Em Python, uma lista é representada por uma sequencia de itens, separados por vírgula e dentro de colchetes `[]`. Uma lista vazia é representada por colchetes sem nenhuma informação presente entre os colchetes.
"""

lista_vazia = []
lista_campus = ["Vergueiro", "Memorial", "Vila Prudente", "Santo Amaro", "Vila Maria"]

"""### Tipos de variáveis de uma lista

A lista pode acomodar qualquer tipo de variável
"""

lista_mista = ["Presidente", 3, 34.2, None, True]

"""### Acessar elementos de uma lista

Para acessar elementos de uma lista use `lista[<numero do elemento>]`.

*Lembre-se que Python é indexado em zero $0$*
"""

print(lista_mista[0]) #primeiro elemento
print(lista_campus[2]) #terceiro elemento

"""### Listas e `FOR` loops

Listas podem ser iteradas com `for` loops
"""

for campus in lista_campus:
    print(campus)
for i in lista_mista:
    print(type(i))

"""### Operações com lista

* Adição e remoção: `append` e `remove`
* Contar o número de items: `count`
* Quantidade de itens: `len`
* Arrumar: `sort`
"""

lista_campus = ["Vergueiro", "Memorial", "Vila Prudente", "Santo Amaro", "Vila Maria"]
lista_campus.append("Memorial")
lista_campus.remove("Vergueiro")
print(lista_campus.count("Memorial"))
print(lista_campus.count("Vergueiro"))

lista_campus.sort()
print(lista_campus)
print(len(lista_campus))

"""### Mais operações com listas
* Adição de listas: `list_1` + `list_2` ou `list_1.extend(list_2)`
"""

lista_campus = ["Vergueiro", "Memorial", "Vila Prudente", "Santo Amaro", "Vila Maria"]
lista_numeros = [1, 2, 3, 4, 5]

print(lista_campus + lista_numeros)
lista_campus.extend(lista_numeros)
print(lista_campus)

"""### Pertencimento a lista

Para verificar se um elemento pertence a lista use o operador `in` e para verificar se não pertence use o `not in`
"""

lista_numeros = [1, 2, 3, 4, 5]

print(3 in lista_numeros)
print(4 not in lista_numeros)

"""### Fatiar (`slice`) uma lista

Para fatiar (*slice*) uma lista use o `:` e o índice (indexado em zero)

```python
lista[1:3]
```

*Cuidado que o intervalo final é não inclusivo*
"""

lista_campus = ["Vergueiro",
                "Memorial",
                "Vila Prudente",
                "Santo Amaro",
                "Vila Maria"]

print(lista_campus[1:3])  # lista_campus[1] e lista_campus[2]
print(lista_campus[3:])
print(lista_campus[:3])
print(lista_campus[2:])

"""## Dicionários (`dict`)

Dicionário, também como conhecido como `dict`, é uma estrutura de dados que possui nenhum, um ou mais itens, que não estão ordenados porém estão **indexados**. Os itens são conhecidos também como elementos. Ela é flexível, ou seja, podemos adicionar novos itens no dicionário, podemos alterar itens existentes, podemos remover itens do dicionário, tudo isto de forma dinâmica.

O dicionário é composto por uma tupla CHAVE (`key`) e VALOR (`value`). O dicionário é indexado pela CHAVE.

```python
<nome do dicionario> = {<chave_01>: <valor_01>, <chave_02>: <valor_02>, <chave_03>: <valor_03>}
```
"""

dicionario = {'RA': 123,
              'nome': "Alexandre",
              'idade': 23,
              'AV1': 7,
              'AV2': 9}

"""### Operações com dicionários
* Acessar valor de uma chave: `dict[key]`
* Alterar o valor de uma chave: `dict[key] = novo_valor`
* Para iterar todas as chaves e valores: `for key, value in dict.items()`
* Verificar pertencimento: `if chave_desejada in dict:` ou `if valor_desejado in dict.items()`
"""

print("dicionario[RA]: ", dicionario['RA'])

dicionario['RA'] = 456

print("dicionario[RA] - após dicionario[RA] = 456: ", dicionario["RA"])

for i in dicionario:
    print(i)

for key, value in dicionario.items():
    print(key, value)

"""## Atividade Lista

1. Crie uma lista com todos os número primos até $100$
2. Crie uma lista vazia chamada `log_numeros_primos`
3. Crie um `for` loop para cada item da lista de números primos e peça para calcular o log do item e adicioná-lo à lista `log_numeros_primos`
4. Imprima todos os items do décimo até o vigésimo da lista `log_numeros_primos` (*cuidado com indexação não-inclusiva*)
"""

from math import log

numeros_primos = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

for $$ in $$:
    $$$$

print()

"""## Atividade Dicionário

Crie um dicionário dos primeiros $100$ números primos com a chave sendo o número primo e valor a raíz quadrada do número primo.

Observação: use `dict[key] = novo_valor`
"""

from math import sqrt

numeros_primos = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

primos_raiz = {}

for $$ in $$:
    $$$$