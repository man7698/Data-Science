# -*- coding: utf-8 -*-
"""Aula_8_pandas_estatistica.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/github/storopoli/ciencia-de-dados/blob/master/notebooks/Aula_8_pandas_estatistica.ipynb

[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/storopoli/ciencia-de-dados/master?filepath=notebooks%2FAula_8_pandas_estatistica.ipynb)
<br>
[![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/storopoli/ciencia-de-dados/blob/master/notebooks/Aula_8_pandas_estatistica.ipynb)

# `pandas` estatística

**Objetivos**: Apresentar o que é estatística pela biblioteca pandas. Abordar quantis, média, mediana, desvio padrão, assimetria, curtose, correlação, covariância.

# Estatística

* média
* mediana
* moda
* desvio padrão
* quantis
* assimetria
* curtose
* correlação

## Média (*inglês: Mean*)

Valor central de um conjunto discreto de números. Especificamente, a soma dos números divido pela quantidade de números. Geralmente média é denominada como $\bar{x}$ ou a letra grega $\mu$.

$\bar{x}=\frac{1}{n}\left(\sum_{i=1}^{n} x_{i}\right)=\frac{x_{1}+x_{2}+\cdots+x_{n}}{n}$

## Mediana (*inglês: Median*)

Valor que separa a metade maior e a metade menor de uma amostra, uma população ou uma distribuição de probabilidade. Num conjunto de dados, pode ser pensada como o valor do "meio".

$\operatorname{mediana}(a)=\frac{a_{\lfloor (\# a+1) \div 2 \rfloor} + a_{\lceil (\# a+1) \div 2 \rceil}}{2}$,

onde $a$ é um lista ordenada de números, $\#a$ o comprimento dessa lista, $\lfloor . \rfloor$ o valor arredondado para baixo, $\lceil . \rceil$ o valor arredondado para cima.

## Moda (*inglês: Mode*)

Valor mais frequente de uma amostra, uma população, ou uma distribuição de probabilidade.

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/media_mediana_moda.png?raw=1" alt="media-mediana-moda" style="width: 300px;"/>

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/renda-media-mediana.png?raw=1" alt="renda-media-mediana" style="width: 600px;"/>

## Desvio Padrão (*inglês: Standard Deviation*)

Medida de quanto variação ou disperção um conjunto de valores possui. Geralmente representada com a letra gregra $\sigma$. É a raiz quadrada da soma dos desvios (em relação à media - $x_i - \bar{x}$) de uma amostra dívido pelo número total da amostra menos um ($N-1$).

$\sigma = \sqrt{\frac{\sum_{i=1}^{N}\left(x_{i}-\bar{x}\right)^{2}}{N-1}}$

É importante porque, **em uma distribuição normal**, os intervalos contém um percentual da população

* $\mu \pm 1 \times \sigma \approx 68\%$
* $\mu \pm 2 \times \sigma \approx 95\%$
* $\mu \pm 3 \times \sigma \approx 99.7\%$


<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/desvio_padra%CC%83o.png?raw=1" alt="desvio_padrão" style="width: 600px;"/>

## Distribuição Normal
"""

import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import norm

f, axes = plt.subplots(1, 1, figsize=(5, 3), sharex=True)
size = 100
for mean, std in [(0, 1), (0, 0.2), (0, 3), (-2, 0.5)]:
    data = norm.rvs(mean, std, size=size)
    sns.distplot(data, label=f"Média {mean} \n DP {std}")

title = f"Distribuição Normal - {size} simulações"
plt.title(title)
axes.legend()
plt.setp(axes, yticks=[])
plt.tight_layout()

"""## Quantis / Percentis

Um percentil (ou um centil) é uma medida usada nas estatísticas indicando o valor abaixo do qual uma determinada porcentagem de observações em um grupo de observações cai. Por exemplo, o 20º percentil é o valor (ou pontuação) abaixo do qual 20% das observações podem ser encontradas.

* 100-quantis são chamados *percentis*
* 12-quantis são chamados *duo*-deciles
* 10-quantis são chamados *decis*
* 5-quantis são chamados *quintis* 
* 4-quantis são chamados *quartis*
* 3-quantis são chamados *tercis*

### Quartis (Q1, Q2, Q3, Q4)

O mais utilizado em ciência de dados

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/quantis-normal.png?raw=1" alt="quantis=normal" style="width: 600px;"/>

## Assimetria (*inglês: Skewness*)

Medida da falta de simetria de uma determinada distribuição probabilística.

* $>0$ - Assimetria Positiva - Cauda direita - valores acima da média mais pesada
* $<0$ - Assimetria Negativa - Cauda esquerda - valores abaixo da média mais pesada
* $0$ - Simetria - Mesmo que uma distribuição Normal

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/assimetria2.png?raw=1" alt="assimetria" style="width: 600px;"/>

## Curtose (*inglês: Kurtosis*)

Curtose é uma medida de forma que caracteriza o achatamento da curva de uma distribuição probabilística.

* $3$ - Mesocúrtica (Mesmo que uma distribuição Normal)
* $< 3$ - Platicúrtica (mais "achatada" que a distribuição Normal)
* $> 3$ - Leptocúrtica (mais "alta" e "afunilada" e concentrada que a distribuição Normal)

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/curtose.png?raw=1" alt="curtose" style="width: 600px;"/>

## Correlação (*inglês: Correlation*)

Qualquer relação estatística (causal ou não causal) entre duas variáveis. Varia entre $-1$ e $1$:

* $0$ - Nenhuma correlação
* $+1$ - Correlação/Associação positiva perfeita
* $-1$ - Correlação/Associação negativa perfeita

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/correlac%CC%A7a%CC%83o.png?raw=1" alt="correlação" style="width: 600px;"/>

* Primeira Fileira: Exemplos de correlações entre $-1$ e $1$
* Segunda Fileira: Correlação não altera a inclinação (*slope*) entre duas variáveis
* Terceira Fileira: Exemplos de relações não-lineares (Correlação é $0$)
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

iris = sns.load_dataset('iris')
titanic = sns.load_dataset('titanic')

"""## Dataset [*Iris*](https://en.wikipedia.org/wiki/Iris_flower_data_set)

Edgar Anderson coletou os dados para quantificar a variação morfológica das flores de íris de três espécies relacionadas.

O conjunto de dados consiste em 50 amostras de cada uma das três espécies de Iris  (Setosa, Virginica e Iris Versicolor). Quatro características foram medidas em cada amostra (cm):

* comprimento das sépalas
* largura  das sépalas
* comprimento das pétalas
* largura das pétalas

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/iris-species.png?raw=1" alt="iris-sepals-petals" style="width: 600px;"/>
"""

g = sns.pairplot(iris, hue='species', markers=["o", "s", "D"])
handles = g._legend_data.values()
labels = g._legend_data.keys()
g._legend.remove()
g.fig.legend(handles=handles, labels=labels, loc='upper left', ncol=3)
plt.tight_layout()

"""## Dataset Titanic

Contém 891 passageiros reais do Titanic que afundou em 15/04/1912 matando 1502 de 2224 passageiros e tripulação que estavam a bordo.

* `survived`: *dummy* `0` ou `1` 
* `pclass`: Classe do Passageiro
    - `1`: Primeira Classe
    - `2`: Segunda Classe
    - `3`: Terceira Classe
* `sex`: Sexo `male` ou `female`
* `age`: Idade
* `sibsp`: Número de Irmãos (*Siblings*) e Esposas (*spouse*) a bordo
* `parch`: Número de pais/filhos a bordo
* `fare`: Valor pago pela passagem em libras
* `embarked`: Porto que embarcou
    - `C`: Cherbourg
    - `Q`: Queenstown
    - `S`: Southampton)
* `class`: Mesmo que `pclass` só que em texto
* `adult_male`: *dummy* para `age > 16` e `sex == 'male'`
* `deck`: Qual deck a cabine do passageiro se situava
* `alive`: Mesmo que survived só que com `yes` ou `no`
* `alone`: *dummy* para se viajava sozinho

<img src="https://github.com/storopoli/ciencia-de-dados/blob/master/notebooks/images/titanic.png?raw=1" alt="titanic" style="width: 500px;"/>
"""

titanic.head()

"""## Pandas Estatísticas Descritivas

* `.min()`: mínimo
* `.max()`: máximo
* `.quantile(q=0.5)`: quantil (padrão `0.5`)
* `.sum()`: soma
* `.mean()`: média
* `.median()`: mediana
* `.mode()`: moda
* `.std()`: desvio padrão
* `.skew()`: assimetria
* `.kurt()`: curtose
"""

print(titanic['age'].mean())
print(titanic['age'].median())

"""## Pandas Descritivos não-estatísticos

* `unique()`: valores únicos
* `value_counts()`: contagem de valores únicos
"""

titanic['class'].unique()

titanic['class'].value_counts()

"""## Pandas `.describe()`

Traz estatísticas descritivas do *DataFrame* em formato de *DataFrame*. Por padrão exclui os `NaN` e `NA`. Para cada variável/coluna:

* `count`: contagem das observações
* `mean`: média
* `std`: desvio padrão
* `min`: mínimo
* `25%`: quartil Q1 (até 25%)
* `50%`: quartil Q2 (até 50%)
* `75%`: quartil Q3 (até 75%)
* `max`: máximo
"""

titanic.describe()

"""## Pandas `.corr()`

Traz correlações do *DataFrame* em formato de *DataFrame*. Por padrão exclui os `NaN` e `NA`. O output é um *DataFrame* quadrado $n \times n$ onde $n$ é o número de variáveis/colunas.
"""

titanic.corr()

"""## Pandas `.groupby`

*Pão com Manteiga* da análise de dados com pandas. Usado em situações que você quer dividir os dados em grupos e fazer *algo* com esses grupos.

Usa os seguintes argumentos:

* `by`: determina os grupos (chamados de *keys*), pode ser uma coluna específica ou uma lista de colunas
* `axis`: qual a lógica da quebra, `0` para linhas ou `1` para colunas. Padrão é `0`

Retorna um objeto chamado *DataFrameGroupBy* que pode ser usado com os seguintes métodos:

| Nome da Função       | Descrição                            |
| -------------------  | ------------------------------------ |
| `count()`            | Número de valores não-NA             |
| `sum()`              | Soma de valores não-NA               |
| `mean()`             | Média de valores não-NA              |
| `median()`           | Mediana Aritmética de valores não-NA |
| `std()`              | Desvio padrão de valores não-NA      |
| `min()`, `max()`     | Mínimo e Máximo de valores não-NA    |
| `first()`, `last()`  | Primeiro e Último de valores não-NA  |

![pandas-groupby](https://static.packt-cdn.com/products/9781783985128/graphics/5128OS_09_01.jpg)

### Exemplo: Uma *key* somente - média
"""

titanic.groupby('sex').mean()

"""### Exemplo: Uma *key* somente - contagem"""

titanic.groupby('sex').count()

"""### Exemplo: Múltiplas *keys* - média"""

titanic.groupby(['sex', 'survived']).mean()

titanic.groupby(['sex', 'embark_town']).count()

"""## Pandas `pd.pivot_table()`

Retorna um *DataFrame* de uma "tabela dinâmica" (*pivot table*) usando linhas como `index`, colunas como `columns` e valores como `values`. Designa funções de agregação `aggfun` (padrão é `'mean'`):

| Nome da Função   | Descrição                            |
| ---------------  | ------------------------------------ |
| `count`          | Número de valores não-NA             |
| `sum`            | Soma de valores não-NA               |
| `mean`           | Média de valores não-NA              |
| `median`         | Mediana Aritmética de valores não-NA |
| `std`            | Desvio padrão de valores não-NA      |
| `min`, `max`     | Mínimo e Máximo de valores não-NA    |
| `first`, `last`  | Primeiro e Último de valores não-NA  |

Obs: usar `margins=True` para subtotais

### Exemplo único `index`
"""

pd.pivot_table(titanic, values = 'survived', index = 'sex', aggfunc='mean', margins=True)

"""### Exemplo múltiplos `index`"""

pd.pivot_table(titanic, values = 'survived', index = ['sex', 'class'], aggfunc='mean', margins=True)

"""### Exemplo múltiplos `index` e múltiplos `values`"""

pd.pivot_table(titanic, values = ['survived', 'age'], index = ['sex', 'class'], aggfunc='mean', margins=True)

"""## Pandas `pd.crosstab()`

Retorna um *DataFrame* de uma tabulação cruzada (*cross tabulation*) de dois (ou mais) fatores. Por padrão usa frequência (`'count'`), mas pode ser usada outras funções de agregação `aggfun`:

| Nome da Função     | Descrição                            |
| -----------------  | ------------------------------------ |
| `count`            | Número de valores não-NA             |
| `sum`              | Soma de valores não-NA               |
| `mean`             | Média de valores não-NA              |
| `median`           | Mediana Aritmética de valores não-NA |
| `std`              | Desvio padrão de valores não-NA      |
| `min`, `max`       | Mínimo e Máximo de valores não-NA    |
| `first`, `last`    | Primeiro e Último de valores não-NA  |

Obs: se usar `aggfun`, especificar valores com `values`

### Exemplo dois fatores - frequência
"""

pd.crosstab(titanic['sex'], titanic['embark_town'])

"""### Exemplo dois fatores - média"""

pd.crosstab(titanic['sex'], titanic['embark_town'], aggfunc='mean', values = titanic['age'])

"""### Exemplo múltiplos fatores - frequência"""

pd.crosstab(titanic['sex'], [titanic['embark_town'], titanic['class']])

"""# Atividade

Importar o arquivo `data/mtcars.csv`. É uma base de dados extraída da revista americana sobre carros *Motor Trend US* de 1974. Possui 32 carros(linhas) e 11 características (colunas)

## Características
* `mpg`: Milhas por Galão (consumo)
* `cyl`: Número de cilíndros
* `disp`: Cilindada (em polegada cúbica)
* `hp`: Cavalos de Potência (HP)
* `drat`: Relação do eixo traseiro
* `wt`:	Peso em (1,000 libras)
* `qsec`: Tempo que atinge 400m (1/4 de milha)
* `vs`: Motor (0 = Forma em V, 1 = Reto)
* `am`: Transmissão (0 = Automático, 1 = Manual)
* `gear`: Número de marchas
* `carb`: Número de carburadores

## Importar os dados

Use o `pd.read_csv()` para importar os dados, use o argumento `index_col=0` para que a primmeira coluna (modelo) seja os índices do *DataFrame*
"""

import pandas as pd

mtcars = pd.read_csv('data/mtcars.csv', index_col=0)

"""## Groupby

Agrupe os dados por cilíndro (`cyl`) e transmissão (`am`), traga os valores médios (`.mean()`) e ordene por ordem descrescente de peso (`wt`) médio (`.sort_values()` cuidado com o argumento `ascending`)
"""

mtcars.groupby()

"""## Pivot Table

Crie uma tabela usando `.pivot_table()` com os tipos de motores (`vs`) como linhas (`index`), com transmissão (`am`) como colunas (`columns`), usando a mediana (`median`) como função de agregração (`aggfun`) do valor de cavalos de potência (`hp`) e consumo (`mpg`), por fim também trazendo os subtotais (`margins`).
"""

pd.pivot_table()

"""## Crosstab

Crie uma tabela usando `.crosstab()` com a frequencia (`count`) dos número de cilindros (`cyl`) como linhas (`index`), com transmissão (`am`) como colunas (`columns`), por fim também trazendo os subtotais (`margins`).
"""

pd.crosstab()